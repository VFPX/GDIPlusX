*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="fulljustified.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*<PropValue>
		DataSource = .NULL.
		Height = 200
		Left = 1
		Name = "Dataenvironment"
		Top = 220
		Width = 520
	*</PropValue>

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="TxtFontName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxtFontSize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxtFontStyle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Imgcanvas1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OptionAlign" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="OptionBorder" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: mode
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "Full Justified Text"
		DoCreate = .T.
		Height = 407
		Left = 1
		mode = 0
		Name = "Form1"
		Top = 28
		Width = 662
		_memberdata = <VFPData>
			<memberdata name="foomethod" type="method" display="fooMethod" favorites="True"/>
			<memberdata name="Form1" type="property" display="Form1" favorites="True"/>
			<memberdata name="_memberdata" type="property" display="_MemberData" favorites="True"/>
			<memberdata name="baseclass" type="property" display="BaseClasS" favorites="True"/>
			<memberdata name="error" type="method" display="eRRor" favorites="True"/>
			<memberdata name="drawfulljustifiedstring" type="method" display="DrawFullJustifiedString" favorites="True"/>
			<memberdata name="declaredll" type="method" display="DeclareDll"/>
		</VFPData>
	*</PropValue>

	ADD OBJECT 'cmdGetFont' AS commandbutton WITH ;
		Caption = "Choose Font", ;
		Height = 25, ;
		Left = 12, ;
		Name = "cmdGetFont", ;
		TabIndex = 3, ;
		Top = 12, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Imgcanvas1' AS imgcanvas WITH ;
		Anchor = 15, ;
		Height = 360, ;
		Left = 204, ;
		Name = "Imgcanvas1", ;
		smoothingmode = 0, ;
		Top = 36, ;
		Width = 444
		*< END OBJECT: ClassLib="..\source\gdiplusx.vcx" BaseClass="image" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Resize this window and see how fast the full text justifying works !", ;
		FontSize = 11, ;
		Height = 19, ;
		Left = 204, ;
		Name = "Label2", ;
		TabIndex = 5, ;
		Top = 12, ;
		Width = 428
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'OptionAlign' AS optiongroup WITH ;
		ButtonCount = 4, ;
		Height = 84, ;
		Left = 12, ;
		Name = "OptionAlign", ;
		Top = 144, ;
		Value = 4, ;
		Width = 132, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "Left Aligned", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 0, ;
		Option1.Width = 82, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Centered", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Width = 69, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "Right Aligned", ;
		Option3.Height = 17, ;
		Option3.Left = 5, ;
		Option3.Name = "Option3", ;
		Option3.Top = 43, ;
		Option3.Width = 91, ;
		Option4.AutoSize = .T., ;
		Option4.Caption = "Full Justified Text", ;
		Option4.FontBold = .T., ;
		Option4.ForeColor = 0,0,255, ;
		Option4.Height = 17, ;
		Option4.Left = 5, ;
		Option4.Name = "Option4", ;
		Option4.Top = 62, ;
		Option4.Value = 1, ;
		Option4.Width = 117
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'OptionBorder' AS optiongroup WITH ;
		ButtonCount = 2, ;
		Height = 48, ;
		Left = 12, ;
		Name = "OptionBorder", ;
		Top = 264, ;
		Value = 2, ;
		Width = 132, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "No Border", ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Top = 5, ;
		Option1.Value = 0, ;
		Option1.Width = 74, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Red Border", ;
		Option2.Height = 17, ;
		Option2.Left = 5, ;
		Option2.Name = "Option2", ;
		Option2.Top = 24, ;
		Option2.Value = 1, ;
		Option2.Width = 81
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'TxtFontName' AS textbox WITH ;
		Height = 25, ;
		Left = 12, ;
		Name = "TxtFontName", ;
		TabIndex = 4, ;
		Top = 48, ;
		Value = Verdana, ;
		Width = 108
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TxtFontSize' AS textbox WITH ;
		Alignment = 3, ;
		Height = 25, ;
		Left = 132, ;
		Name = "TxtFontSize", ;
		TabIndex = 5, ;
		Top = 48, ;
		Value = 9, ;
		Width = 30
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TxtFontStyle' AS textbox WITH ;
		Height = 25, ;
		Left = 168, ;
		Name = "TxtFontStyle", ;
		TabIndex = 6, ;
		Top = 48, ;
		Value = , ;
		Width = 24
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE cmdGetFont.Click
		lcFont = GETFONT()
		IF EMPTY(lcFont)
			RETURN
		ENDIF
		
		Thisform.TxtFontName.Value = GETWORDNUM(lcFont,1,',')
		Thisform.TxtFontSize.Value = VAL(GETWORDNUM(lcFont,2,','))
		Thisform.TxtFontStyle.Value = GETWORDNUM(lcFont,3,',')
		Thisform.Imgcanvas1.Draw()
		
	ENDPROC

	PROCEDURE Imgcanvas1.beforedraw
		LOCAL lcText as Character 
		TEXT TO lcText NOSHOW 
		GDIPlusX is a set of VFP 9.0 class libraries that wrap the 603 GDI+ Flat API functions of GDIPlus.dll. 
		The library currently consist of 83 VFP classes and 1,146 methods. The project is still under development so not all classes have been completed and several of the classes/methods are still being tested. The Readme.htm file, included with the download, shows the current coding status of each class. As of August 31, 2006, the overall status of the library is about 97% coded and 60% tested.
		The object model of these classes closely emulates the classes contained in the System.Drawing namespace of Visual Studio .NET. This not only makes the library easier to use, but also allows VFP developers to tap into thousands of GDI+ code samples, written in .NET, that can be easily translated to VFP code.
		The Help folder contained in the GDIPlusX download has several sample programs that were converted from the System.Drawing documentation in .NET.
		
		Get the latest release:
		http://www.codeplex.com/VFPX/Wiki/View.aspx?title=GDIPlusX
		
		If you would like to be involved in the project, please send an email to gdiplusx@moxiedata.com
		To report any issues with the library, please use the Issue Tracker in CodePlex.
		ENDTEXT 
		
		WITH _Screen.System.Drawing
		
			*!* Fill Image with Background color
			This.oGfx.Clear(.Color.White)
		
			LOCAL loTextBrush AS xfcSolidBrush
			loTextBrush = .SolidBrush.New(.Color.Black)
		
		
			LOCAL lcStyle
			lcStyle = Thisform.TxtFontStyle.Value
		
		*	LOCAL loStyle as xfcFontStyle
			DO CASE
			CASE lcStyle == "B"
				loStyle = .FontStyle.Bold 
			CASE lcStyle == "I"
				loStyle = .FontStyle.Italic
			CASE lcStyle == "BI"
				loStyle = .FontStyle.BoldItalic
			OTHERWISE  
				loStyle = .FontStyle.Regular
			ENDCASE
			
			* Create Font Object
			LOCAL loFont AS xfcFont
			loFont = .Font.New(Thisform.TxtFontName.Value, Thisform.TxtFontSize.Value, loStyle)
		
		
			LOCAL lnOption
			lnOption = Thisform.OptionAlign.Value
			
			LOCAL loStringFormat as xfcStringFormat
			loStringFormat = _Screen.System.Drawing.StringFormat.New()
			
			DO CASE 
			CASE lnOption = 1 && Left Align
				loStringFormat.Alignment = _Screen.System.Drawing.StringAlignment.Near
				This.oGfx.DrawString(lcText, loFont, loTextBrush, ;
					This.Rectangle, loStringFormat)
			CASE lnOption = 2 && Centered
				loStringFormat.Alignment = _Screen.System.Drawing.StringAlignment.Center
				This.oGfx.DrawString(lcText, loFont, loTextBrush, ;
					This.Rectangle, loStringFormat)
		
			CASE lnOption = 3 && Right Align
				loStringFormat.Alignment = _Screen.System.Drawing.StringAlignment.Far
				This.oGfx.DrawString(lcText, loFont, loTextBrush, ;
					This.Rectangle, loStringFormat)
		
			CASE lnOption = 4 && Full Justify
				* Draw the Full-Justified text
				LOCAL lnSecs
				lnSecs = SECONDS()
				This.oGfx.DrawStringJustified(lcText, loFont, loTextBrush, This.Rectangle)
				WAIT WINDOW ("Elapsed " + TRANSFORM(SECONDS() - lnSecs) + " Seconds.") NOWAIT 
			ENDCASE
		
			* Draw Border if required
			IF Thisform.OptionBorder.Value = 2 && Red Border
				This.oGfx.DrawRectangle(.Pen.New(.Color.Red,1), 0, 0, This.Width - 1, This.Height - 1)
			ENDIF
			
		ENDWITH
	ENDPROC

	PROCEDURE OptionAlign.InteractiveChange
		Thisform.Imgcanvas1.Draw()
	ENDPROC

	PROCEDURE OptionBorder.InteractiveChange
		Thisform.Imgcanvas1.Draw()
	ENDPROC

	PROCEDURE TxtFontName.Valid
		This.Value = PROPER(ALLTRIM(This.Value))
		Thisform.Imgcanvas1.Draw()
	ENDPROC

	PROCEDURE TxtFontSize.Valid
		Thisform.Imgcanvas1.Draw()
	ENDPROC

	PROCEDURE TxtFontStyle.Valid
		Thisform.Imgcanvas1.Draw()
	ENDPROC

ENDDEFINE
