*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="canvasdrawing.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*<PropValue>
		DataSource = .NULL.
		Height = 0
		Left = 0
		Name = "Dataenvironment"
		Top = 0
		Width = 0
	*</PropValue>

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Imgcanvas1" UniqueID="" Timestamp="" />

	*<PropValue>
		Caption = "Form1"
		DoCreate = .T.
		Left = 0
		Name = "Form1"
		Top = 0
	*</PropValue>

	ADD OBJECT 'Imgcanvas1' AS imgcanvas WITH ;
		Height = 228, ;
		Left = 12, ;
		Name = "Imgcanvas1", ;
		Top = 12, ;
		Width = 348
		*< END OBJECT: ClassLib="..\source\gdiplusx.vcx" BaseClass="image" />
	
	PROCEDURE Imgcanvas1.afterdraw
		* Print the Image
		  IF MESSAGEBOX("Do you want to print the Image from the Canvas ?",32+1,"Print Sample") = 1
		    This.oBmp.ToPrinter()
		  ENDIF
		
	ENDPROC

	PROCEDURE Imgcanvas1.beforedraw
		WITH _Screen.System.Drawing
		
		* To allow Intellisense for "This.oGfx"
		  Local loGfx As xfcGraphics
		  loGfx = This.oGfx
		
		
		* Create a Linear Gradient Brush
		  Local loGradBrsh As xfcLinearGraphicsBrush
		  loGradBrsh = .Drawing2D.LinearGradientBrush.New(;
		    This.Rectangle, .Color.LightBlue, .Color.DarkBlue, 1)
		
		* Draw a rectangle using the whole rectangle from the canvas and the Gradient Brush
		  loGfx.FillRectangle(loGradBrsh, This.Rectangle)
		
		
		* Draw a Triangle
		  Dimension laPoints(3)
		  laPoints(1) = .Point.New(20, 100)
		  laPoints(2) = .Point.New(90, 100)
		  laPoints(3) = .Point.New(55, 40)
		  loGfx.FillPolygon(.Brushes.Green, @laPoints)
		
		
		* Draw a Rectangle
		  loGfx.FillRectangle(.Brushes.Yellow, 20, 100, 70, 50)
		  loGfx.FillRectangle(.Brushes.Gray, 90, 100, 100, 50)
		
		
		* Draw a Trapeze
		  Dimension laPoints(4)
		  laPoints(1) = .Point.New(55, 40)
		  laPoints(2) = .Point.New(90, 100)
		  laPoints(3) = .Point.New(190, 100)
		  laPoints(4) = .Point.New(155, 40)
		  loGfx.FillPolygon(.SolidBrush.New(.Color.FromRGB(128,0,0)), @laPoints)
		
		
		* Create a path containing two curves
		  Local myPath As xfcGraphicsPath
		  myPath = .Drawing2D.GraphicsPath.New()
		
		  myPath.StartFigure()
		  Dimension points(4)
		  points(1) = .Point.New(45, 150)
		  points(2) = .Point.New(65, 170)
		  points(3) = .Point.New(45, 190)
		  points(4) = .Point.New(65, 210)
		  myPath.AddCurve(@points)
		  myPath.AddLine(.Point.New(65,210), .Point.New(85, 210))
		  points(1) = .Point.New(85, 210)
		  points(2) = .Point.New(65, 190)
		  points(3) = .Point.New(85, 170)
		  points(4) = .Point.New(65, 150)
		  myPath.AddCurve(@points)
		  myPath.AddLine(.Point.New(65,150), .Point.New(45, 150))
		
		* Draw the path
		  loGfx.FillPath(.Brushes.Orange, myPath)
		  loGfx.DrawPath(.Pen.New(.Color.Black, 1), myPath) && Black Border
		
		
		* Draw the Sun
		  Local loPath As xfcGraphicsPath
		  loPath = .Drawing2D.GraphicsPath.New()
		  loPath.AddEllipse(280, 20, 40, 40)
		
		  Local loPathGradBrush As xfcPathGradientBrush
		  loPathGradBrush = .Drawing2D.PathGradientBrush.New(loPath)
		  loPathGradBrush.CenterColor = .Color.Red
		
		  loPathGradBrush.SurroundColors[1] = .Color.Yellow
		  loGfx.FillEllipse(loPathGradBrush, 280, 20, 40, 40)
		
		
		* Draw a string
		  loGfx.DrawString("GdiPlusX is cool !!!", ;
		    .Font.New("Tahoma", 20), .Brushes.Red, 110, This.Height - 40)
		
		
		* Save the Image to Disk
		  LOCAL lcNewFile
		  lcNewFile = FULLPATH("Samples\Outputs\" + "CanvasDrawing.png")
		  This.oBmp.Save(lcNewFile, .Imaging.ImageFormat.Png)
		
		* Print the Image
		* Check the "AfterDraw Method"
		  
		ENDWITH
	ENDPROC

ENDDEFINE
