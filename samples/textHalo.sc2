*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.20" SourceFile="texthalo.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	*<PropValue>
		DataSource = .NULL.
		Height = 200
		Left = 1
		Name = "Dataenvironment"
		Top = 220
		Width = 520
	*</PropValue>

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Imgcanvas1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtText" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Command2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxtFontName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetFont" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxtFontSize" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="TxtFontStyle" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: mode
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "Halo effect on text"
		DoCreate = .T.
		Height = 230
		Left = 2
		MinHeight = 200
		mode = 0
		Name = "Form1"
		Top = 10
		Width = 674
	*</PropValue>

	ADD OBJECT 'cmdGetFont' AS commandbutton WITH ;
		Caption = "Choose Font", ;
		Height = 25, ;
		Left = 12, ;
		Name = "cmdGetFont", ;
		TabIndex = 3, ;
		Top = 12, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command1' AS commandbutton WITH ;
		Anchor = 1, ;
		Caption = "Main Color", ;
		Height = 25, ;
		Left = 12, ;
		Name = "Command1", ;
		TabIndex = 4, ;
		Top = 108, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Command2' AS commandbutton WITH ;
		Anchor = 1, ;
		Caption = "Shadow Color", ;
		Height = 25, ;
		Left = 12, ;
		Name = "Command2", ;
		TabIndex = 3, ;
		Top = 144, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Imgcanvas1' AS imgcanvas WITH ;
		Anchor = 15, ;
		Height = 108, ;
		Left = 216, ;
		Name = "Imgcanvas1", ;
		smoothingmode = 0, ;
		Top = 108, ;
		Width = 444
		*< END OBJECT: ClassLib="..\source\gdiplusx.vcx" BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Enter text below", ;
		Height = 17, ;
		Left = 216, ;
		Name = "Label1", ;
		TabIndex = 5, ;
		Top = 12, ;
		Width = 88
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Halo", ;
		Height = 17, ;
		Left = 216, ;
		Name = "Label2", ;
		TabIndex = 5, ;
		Top = 84, ;
		Width = 28
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackColor = 0,0,0, ;
		Height = 25, ;
		Left = 132, ;
		Name = "Shape1", ;
		Top = 108, ;
		Width = 25
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackColor = 255,255,128, ;
		Height = 25, ;
		Left = 132, ;
		Name = "Shape2", ;
		Top = 144, ;
		Width = 25
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'TxtFontName' AS textbox WITH ;
		Height = 25, ;
		Left = 12, ;
		Name = "TxtFontName", ;
		TabIndex = 4, ;
		Top = 48, ;
		Value = Arial, ;
		Width = 108
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TxtFontSize' AS textbox WITH ;
		Alignment = 3, ;
		Height = 25, ;
		Left = 132, ;
		Name = "TxtFontSize", ;
		TabIndex = 5, ;
		Top = 48, ;
		Value = 48, ;
		Width = 30
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'TxtFontStyle' AS textbox WITH ;
		Height = 25, ;
		Left = 168, ;
		Name = "TxtFontStyle", ;
		TabIndex = 6, ;
		Top = 48, ;
		Value = B, ;
		Width = 24
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtText' AS textbox WITH ;
		Anchor = 131, ;
		Height = 25, ;
		Left = 216, ;
		Name = "txtText", ;
		TabIndex = 1, ;
		Top = 36, ;
		Value = GdiPlus-X is Cool !, ;
		Width = 444
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE cmdGetFont.Click
		lcFont = GETFONT()
		Thisform.TxtFontName.Value = GETWORDNUM(lcFont,1,',')
		Thisform.TxtFontSize.Value = VAL(GETWORDNUM(lcFont,2,','))
		Thisform.TxtFontStyle.Value = GETWORDNUM(lcFont,3,',')
		Thisform.Imgcanvas1.Draw()
		
	ENDPROC

	PROCEDURE Command1.Click
		Thisform.Shape1.BackColor = GETCOLOR(Thisform.Shape1.BackColor)
		Thisform.Imgcanvas1.Draw()
		
	ENDPROC

	PROCEDURE Command2.Click
		Thisform.Shape2.BackColor = GETCOLOR(Thisform.Shape2.BackColor)
		Thisform.Imgcanvas1.Draw()
		
	ENDPROC

	PROCEDURE Imgcanvas1.beforedraw
		*!*	Totally based on Bob Powell article
		*!*	http://www.bobpowell.net/halo.htm
		
		
		*!*	Create a new bitmap that is smaller than your original drawing area by some fixed ratio.  In this case 1/5th. 
		*!*	Create a GraphicsPath and had the desired text to it.  
		*!*	Obtain a graphics object for the bitmap and create a matrix that shrinks all drawing output by the chosen ratio.  
		*!*	Fill the text path using the desired halo color and then, just for good measure, stroke the text path with a pen to provide a little bit of edge to the aura.  
		*!*	Set the interpolation mode in the destination graphics object to HighQualityBilinear and stretch the bitmap containing the halo using the chosen ratio again.  
		*!*	Finally, on the destination graphics object, fill the text path without changing the size.  This should register the text correctly with the fuzzy outline of the halo and produce the final effect.  
		
		LOCAL loFont AS xfcFont
		
		WITH _SCREEN.SYSTEM.Drawing
			This.Clear()
		
			LOCAL lcStyle
			lcStyle = Thisform.TxtFontStyle.Value
			DO CASE
			CASE lcStyle == "B"
				loStyle = .FontStyle.Bold 
			CASE lcStyle == "I"
				loStyle = .FontStyle.Italic
			CASE lcStyle == "BI"
				loStyle = .FontStyle.BoldItalic
			OTHERWISE  
				loStyle = .FontStyle.Regular
			ENDCASE
			
			* Create a bitmap in a fixed ratio to the original drawing area.
			LOCAL loBmp as xfcBitmap
			loBmp = .Bitmap.New(This.Width / 5, This.Height / 5)
		
			* Create a GraphicsPath object.  
			LOCAL loPath as xfcGraphicsPath
			loPath = .Drawing2D.GraphicsPath.New()
		
			* Add the string in the chosen style.  
			loPath.AddString(Thisform.TxtText.Value, ;
				.FontFamily.New(Thisform.TxtFontName.Value), ;
				loStyle, ;
				Thisform.TxtFontSize.Value, ;
				.Point.New(0, 0), ;
				.StringFormat.GenericTypographic)
		
			* Get the graphics object for the image.  
			LOCAL loGfx as xfcGraphics
			loGfx = .Graphics.FromImage(loBmp)
		
			* Create a matrix that shrinks the drawing output by the fixed ratio.  
			LOCAL loMatrix as xfcMatrix
			loMatrix = .Drawing2D.Matrix.New(1/5, 0, 0, 1/5, -1/5, -1/5)
		
			* Choose an appropriate smoothing mode for the halo.  
			loGfx.SmoothingMode = .Drawing2D.SmoothingMode.AntiAlias
		
			* Transform the graphics object so that the same half may be used for both halo and text output.  
			loGfx.Transform = loMatrix
		
			* Using a suitable pen...
			LOCAL loPen as xfcPen
			loPen = .Pen.New(.Color.FromRGB(Thisform.Shape2.BackColor))
		
			* Draw around the outline of the path
			loGfx.DrawPath(loPen, loPath)
		
			* and then fill in for good measure.  
			loGfx.FillPath( .SolidBrush.New(.Color.FromRGB(Thisform.Shape2.BackColor)), loPath)
		
			* setup the smoothing mode for path drawing
			This.oGfx.SmoothingMode = .Drawing2D.SmoothingMode.AntiAlias
		
			* and the interpolation mode for the expansion of the halo bitmap 
			This.oGfx.InterpolationMode = .Drawing2D.InterpolationMode.HighQualityBicubic
		
			* expand the halo making the edges nice and fuzzy.  
			This.oGfx.DrawImage(loBmp, This.Rectangle, 0, 0, ;
				loBmp.Width, loBmp.Height, .GraphicsUnit.Pixel)
		
			* Redraw the original text 
			This.oGfx.FillPath(.SolidBrush.New(.Color.FromRGB(Thisform.Shape1.BackColor)), loPath)
		
		ENDWITH
		RETURN
	ENDPROC

	PROCEDURE Shape1.Click
		This.Parent.Command1.Click
	ENDPROC

	PROCEDURE Shape2.Click
		This.Parent.Command2.Click
	ENDPROC

	PROCEDURE TxtFontSize.Valid
		Thisform.Imgcanvas1.Draw()
		
	ENDPROC

	PROCEDURE txtText.InteractiveChange
		LPARAMETERS nKeyCode, nShiftAltCtrl
		DODEFAULT()
		Thisform.Imgcanvas1.Draw()
		
	ENDPROC

ENDDEFINE
